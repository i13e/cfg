#!/usr/bin/zsh
# Description

# If .zprofile wasn't sourced, source it.
[ -z "$XDG_CONFIG_HOME" ] && . "$HOME/.zprofile"

source $ZDOTDIR/config.zsh

function _cache {
  (( $+commands[$1] )) || return 1
  local cache_dir="$XDG_CACHE_HOME/${SHELL##*/}"
  local cache="$cache_dir/$1"
  if [[ ! -f $cache || ! -s $cache ]]; then
      #echo "Caching $1"
      mkdir -p $cache_dir
      "$@" >$cache
      chmod 600 $cache
  fi
  if [[ -o interactive ]]; then
      source $cache || rm -f $cache
  fi
}

# Be restrictive with permissions
if (( EUID != 0 )); then
    umask 027
# else
    # Be even more restrictive if root.
    # umask 077
fi

# Make zsh directories if needed.
local ZSH_CACHE="$XDG_CACHE_HOME/zsh"
local ZPLUGDIR="$XDG_DATA_HOME/zsh/plugins"
[ -e "$ZSH_CACHE" ] || mkdir -p "$ZSH_CACHE"
[ -e "$ZPLUGDIR" ] || mkdir -p "$ZPLUGDIR"

# If not in tmux, start tmux.
#if [[ -z ${TMUX+X}${ZSH_SCRIPT+X}${ZSH_EXECUTION_STRING+X} ]]; then
#    exec tmux
#fi

# zcompare
# Function to determine the need of a zcompile. If the .zwc file
# does not exist, or the base file is newer, we need to compile.
# These jobs are asynchronous, and will not impact the interactive shell
zcompile-many() {
    local f
    for f; do
        if [[ ! -s "$f".zwc || "$f" -nt "$f".zwc ]] ; then
            zcompile -R -- "$f".zwc "$f"
        fi
    done
}

# NOTE: Be careful about plugin load order or subtle breakage can emerge.
repos=(
    #"jeffreytse/zsh-vi-mode"
    "zdharma-continuum/fast-syntax-highlighting"
    "zsh-users/zsh-completions"
    "zsh-users/zsh-autosuggestions"
    "zsh-users/zsh-history-substring-search"
    "romkatv/powerlevel10k"
    "hlissner/zsh-autopair"
    "USER/dotbare"
)
plugins=(${repos:t})

## Clone and compile to wordcode missing plugins.
for ((i = 1; i <= $#repos; i++)); do
    # Don't use any plugins for root.
    if [[ "$EUID" = 0 ]]; then
        break
    # If the plugin is not installed, clone it.
    elif [[ ! -e "$ZPLUGDIR/${plugins[$i]}" ]]; then
        local gh="https://github.com/${repos[$i]}.git"
        git clone --depth=1 "$gh" "$ZPLUGDIR/$plugins[$i]"
        # cfg submodule add --shallow
        zcompile-many $(find "$ZPLUGDIR/$plugins[$i]" -name "*.zsh")
        # ln -s $ZPLUGDIR/$file/$file.(plugin.zsh|zsh-theme) $ZPLUGDIR/
    elif [[ -e "$ZPLUGDIR/${plugins[$i]}" ]]; then
        zcompile-many $(find "$ZPLUGDIR/$plugins[$i]" -name "*.zsh")
        source $ZPLUGDIR/$plugins[$i]/$plugins[$i].(plugin.zsh|zsh-theme)
#   else
#       echo "Plugin ${plugins[$i]} already exists."
    fi
done

# Activate Powerlevel10k Instant Prompt.
if [[ -r "$XDG_CACHE_HOME/p10k-instant-prompt-${(%):-%n}.zsh" ]]; then
    source "$XDG_CACHE_HOME/p10k-instant-prompt-${(%):-%n}.zsh"
fi

# Enable the "new" completion system (compsys).
fpath=($ZPLUGDIR/zsh-completions/src $fpath)
autoload -Uz compinit && compinit -d $ZSH_CACHE/zcompdump
zcompile-many $ZSH_CACHE/zcompdump
zcompile-many $ZDOTDIR/*.zsh
unfunction zcompile-many

ZSH_AUTOSUGGEST_MANUAL_REBIND=1

# To customize prompt, run `p10k configure` or edit $ZDOTDIR/p10k.zsh.
source "$ZDOTDIR/p10k.zsh"

## Bootstrap interactive sessions
if [[ $TERM != dumb ]]; then
    # Change cursor shape to beam and pwd in terminal title
    export GPG_TTY=$TTY
    precmd() { printf "\e]0;%s\a" ${(V)${(%):-%1~}} >$TTY; printf "\e[5 q" >$TTY }
    preexec() { printf "\e]0;%s\a" ${(V)${(%):-%1~}} >$TTY; printf "\e[5 q" >$TTY }

    source "$ZDOTDIR/keybinds.zsh"
    source "$ZDOTDIR/completion.zsh"
    source "$ZDOTDIR/aliases.zsh"

    [ -x /usr/bin/fzf ] && source "$ZPLUGDIR/fzf.zsh"
    # Auto-generated by nixos
    #_source $ZDOTDIR/extra.zshrc
    # If you have host-local configuration, put it here
    #_source $ZDOTDIR/local.zshrc

    _cache fasd --init posix-alias zsh-{hook,{c,w}comp{,-install}}
    autopair-init
fi
