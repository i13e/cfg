[user]
  email = 62034540+i13e@users.noreply.github.com
  name = Ian Breckenridge
  signingkey = CF74CE671D8462B5

[alias]
  # List available aliases
  aliases = !git config --get-regexp alias | sed -re 's/alias\\.(\\S*)\\s(.*)$/\\1 = \\2/g'
  # Display tree-like log, because default log is a pain…
  lg = log --graph --date=relative --pretty=tformat:'%Cred%h%Creset -%C(auto)%d%Creset %s %Cgreen(%an %ad)%Creset'
  # https://haacked.com/archive/2014/07/28/github-flow-aliases/
  up = !git pull --rebase --prune $@ && git submodule update --init --recursive
  # Useful when you have to update your last commit
  # with staged files without editing the commit message.
  oops = commit --amend --no-edit
  # Ensure that force-pushing won't lose someone else's work (only mine).
  push-with-lease = push --force-with-lease
  # Rebase won’t trigger hooks on each "replayed" commit.
  # This is an ugly hack that will replay each commit during rebase with the
  # standard `commit` command which will trigger hooks.
  rebase-with-hooks = rebase -x 'git reset --soft HEAD~1 && git commit -C HEAD@{1}'
  # List local commits that were not pushed to remote repository
  review-local = "!git lg @{push}.."
  # Edit last commit message
  reword = commit --amend
  # Undo last commit but keep changed files in stage
  uncommit = reset --soft HEAD~1
  # Remove file(s) from Git but not from disk
  untrack = rm --cache --
  ci = commit
  co = checkout
  email-domains = !git log --format="%aE" | awk -F'@' '{print $2}' | sort -u
  emails = !git log --format="%aE" | sort -u
  la = "!git config -l | grep alias | cut -c 7-"
  lola = log --graph --decorate --pretty=oneline --abbrev-commit --all
  ranked-authors = !git shortlog -esn --all
  squash-all = "!f(){ git reset $(git commit-tree \"HEAD^{tree}\" \"$@\");};f"
  st = status
  unadd = reset HEAD

[commit]
  gpgSign = true

[core]
  # Don't paginate output by default
  pager = delta
  # Don't consider trailing space change as a cause for merge conflicts
  whitespace = -trailing-space
  # Global shared hooks directory
  # hooksPath = ~/.githooks

[diff]
  algorithm = histogram
  # Display submodule-related information (commit listings)
  submodule = log
  tool = nvimdiff
  # Use better, descriptive initials (c, i, w) instead of a/b.
  mnemonicPrefix = true
  # When using --word-diff, assume --word-diff-regex=.
  wordRegex = .

[difftool "vscode"]
  cmd = code --wait --diff $LOCAL $REMOTE

[fetch]
  # Auto-fetch submodule changes (sadly, won't auto-update)
  recurseSubmodules = on-demand
  prune = true
  prunetags = true

[grep]
  # Consider most regexes to be ERE
  extendedRegexp = true
  break = true
  heading = true
  lineNumber = true

[help]
  autocorrect = 10

[init]
  defaultBranch = master

[log]
  # Automatically --follow when given a single path
  follow = true
  # Disable decorate for reflog
  # (because there is no dedicated `reflog` section available)
  decorate = false
  # Use abbrev SHAs whenever possible/relevant instead of full 40 chars
  abbrevCommit = true

[merge]
  ff = only
  conflictStyle = zdiff3
  tool = nvimdiff

[mergetool]
  # Auto-accept file prompts when launching merge tools
  prompt = false
  # Clean up backup files created by merge tools on tool exit
  keepBackup = false
  # Clean up temp files created by merge tools on tool exit
  keepTemporaries = false
  # Put the temp files in a dedicated dir anyway
  writeToTemp = true

[pull]
  rebase = merges

[push]
  autoSetupRemote = true
  default = current
  followTags = true
  gpgSign = if-asked

[rebase]
  autoSquash = true
  autoStash = true
  updateRefs = true

[rerere]
  autoupdate = true
  enabled = true

[status]
  # Display submodule rev change summaries in status
  submoduleSummary = true
  # Recursively traverse untracked directories to display all contents
  showUntrackedFiles = all

[tag]
  gpgSign = true
  # Sort tags as version numbers whenever applicable, so 1.10.2 is AFTER 1.2.0.
  sort = version:refname
